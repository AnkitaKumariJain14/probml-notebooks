# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.11.3
#   kernelspec:
#     display_name: Python 3
#     name: python3
# ---

# +
# Copyright 2021 Google LLC
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.
# Notebook authors: Kevin P. Murphy (murphyk@gmail.com)
# and Mahmoud Soliman (mjs@aucegypt.edu)

# This notebook reproduces figures for chapter 11 from the book
# "Probabilistic Machine Learning: An Introduction"
# by Kevin Murphy (MIT Press, 2021).
# Book pdf is available from http://probml.ai
# -

# <a href="https://opensource.org/licenses/MIT" target="_parent"><img src="https://img.shields.io/github/license/probml/pyprobml"/></a>

# <a href="https://colab.research.google.com/github/probml/pml-book/blob/main/pml1/figure_notebooks/chapter11_linear_regression_figures.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# ## Figure 11.1:<a name='11.1'></a> <a name='linregPolyDegrees1and2'></a> 

#
#   Polynomial of degrees 1 and 2 fit to 21 datapoints.  
# Figure(s) generated by [linreg_poly_vs_degree.py](https://github.com/probml/pyprobml/blob/master/scripts/linreg_poly_vs_degree.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linreg_poly_vs_degree.py

# ## Figure 11.2:<a name='11.2'></a> <a name='linregSurf'></a> 

#
#   (a) Contours of the RSS error surface for the example in \cref  fig:linregPolyDegree1 . The blue cross represents the MLE. (b) Corresponding surface plot.  
# Figure(s) generated by [linreg_contours_sse_plot.py](https://github.com/probml/pyprobml/blob/master/scripts/linreg_contours_sse_plot.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linreg_contours_sse_plot.py

# ## Figure 11.3:<a name='11.3'></a> <a name='leastSquaresGeom'></a> 

#
#   Graphical interpretation of least squares for $m=3$ equations and $n=2$ unknowns when solving the system $\mathbf  A \mathbf  x = \mathbf  b $. $\mathbf  a _1$ and $\mathbf  a _2$ are the columns of $\mathbf  A $, which define a 2d linear subspace embedded in $\mathbb  R ^3$. The target vector $\mathbf  b $ is a vector in $\mathbb  R ^3$; its orthogonal projection onto the linear subspace is denoted $ \mathbf  b  $. The line from $\mathbf  b $ to $ \mathbf  b  $ is the vector of residual errors, whose norm we want to minimize. 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# <img src="https://github.com/probml/pml-book/raw/main/pml1/figures/Figure_11.3.png" width="256"/>

# ## Figure 11.4:<a name='11.4'></a> <a name='linregOnline'></a> 

#
#   Regression coefficients over time for the 1d model in \cref  fig:linregPoly2 (a).  
# Figure(s) generated by [linregOnlineDemo.py](https://github.com/probml/pyprobml/blob/master/scripts/linregOnlineDemo.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linregOnlineDemo.py

# ## Figure 11.5:<a name='11.5'></a> <a name='residualPlot'></a> 

#
#   Residual plot for polynomial regression of degree 1 and 2 for the functions in \cref  fig:linregPoly2 (a-b).  
# Figure(s) generated by [linreg_poly_vs_degree.py](https://github.com/probml/pyprobml/blob/master/scripts/linreg_poly_vs_degree.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linreg_poly_vs_degree.py

# ## Figure 11.6:<a name='11.6'></a> <a name='polyfitScatter'></a> 

#
#   Fit vs actual plots for polynomial regression of degree 1 and 2 for the functions in \cref  fig:linregPoly2 (a-b).  
# Figure(s) generated by [linreg_poly_vs_degree.py](https://github.com/probml/pyprobml/blob/master/scripts/linreg_poly_vs_degree.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linreg_poly_vs_degree.py

# ## Figure 11.7:<a name='11.7'></a> <a name='polyfitRidge2'></a> 

#
#   (a-c) Ridge regression applied to a degree 14 polynomial fit to 21 datapoints. (d) MSE vs strength of regularizer. The degree of regularization increases from left to right, so model complexity decreases from left to right.  
# Figure(s) generated by [linreg_poly_ridge.py](https://github.com/probml/pyprobml/blob/master/scripts/linreg_poly_ridge.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linreg_poly_ridge.py

# ## Figure 11.8:<a name='11.8'></a> <a name='geomRidge'></a> 

#
#   Geometry of ridge regression. The likelihood is shown as an ellipse, and the prior is shown as a circle centered on the origin. Adapted from Figure 3.15 of <a href='#BishopBook'>[Bis06]</a> .  
# Figure(s) generated by [geom_ridge.py](https://github.com/probml/pyprobml/blob/master/scripts/geom_ridge.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run geom_ridge.py

# ## Figure 11.9:<a name='11.9'></a> <a name='L2L1contours'></a> 

#
#   Illustration of $\ell _1$ (left) vs $\ell _2$ (right) regularization of a least squares problem. Adapted from Figure 3.12 of <a href='#Hastie01'>[HTF01]</a> . 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# <img src="https://github.com/probml/pml-book/raw/main/pml1/figures/Figure_11.9.png" width="256"/>

# ## Figure 11.10:<a name='11.10'></a> <a name='softThresholding'></a> 

#
#   Left: soft thresholding. Right: hard thresholding. In both cases, the horizontal axis is the residual error incurred by making predictions using all the coefficients except for $w_k$, and the vertical axis is the estimated coefficient $ w _k$ that minimizes this penalized residual. The flat region in the middle is the interval $[-\lambda ,+\lambda ]$. 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# <img src="https://github.com/probml/pml-book/raw/main/pml1/figures/Figure_11.10_A.png" width="256"/>

# <img src="https://github.com/probml/pml-book/raw/main/pml1/figures/Figure_11.10_B.png" width="256"/>

# ## Figure 11.11:<a name='11.11'></a> <a name='lassoPathProstate'></a> 

#
#   (a) Profiles of ridge coefficients for the prostate cancer example vs bound $B$ on $\ell _2$ norm of $\mathbf  w $, so small $B$ (large $\lambda $) is on the left. The vertical line is the value chosen by 5-fold CV using the 1 standard error rule. Adapted from Figure 3.8 of <a href='#HastieBook'>[HTF09]</a> .  
# Figure(s) generated by [ridgePathProstate.py](https://github.com/probml/pyprobml/blob/master/scripts/ridgePathProstate.py) [lassoPathProstate.py](https://github.com/probml/pyprobml/blob/master/scripts/lassoPathProstate.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run ridgePathProstate.py

# %run lassoPathProstate.py

# ## Figure 11.12:<a name='11.12'></a> <a name='lassoPathCoef'></a> 

#
#   Values of the coefficients for linear regression model fit to prostate cancer dataset as we vary the strength of the $\ell _1$ regularizer. These numbers are plotted in \cref  fig:lassoPathProstate (b). 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# ## Figure 11.13:<a name='11.13'></a> <a name='tab:prostateCoef'></a> 

#
#   Results of different methods on the prostate cancer data, which has 8 features and 67 training cases. Methods are: OLS = ordinary least squares, Subset = best subset regression, Ridge, Lasso. Rows represent the coefficients; we see that subset regression and lasso give sparse solutions. Bottom row is the mean squared error on the test set (30 cases). Adapted from Table 3.3. of <a href='#HastieBook'>[HTF09]</a> .  
# Figure(s) generated by [prostate_comparison.py](https://github.com/probml/pyprobml/blob/master/scripts/prostate_comparison.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run prostate_comparison.py

# ## Figure 11.14:<a name='11.14'></a> <a name='prostateBoxplot'></a> 

#
#   Boxplot displaying (absolute value of) prediction errors on the prostate cancer test set for different regression methods.  
# Figure(s) generated by [prostate_comparison.py](https://github.com/probml/pyprobml/blob/master/scripts/prostate_comparison.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run prostate_comparison.py

# ## Figure 11.15:<a name='11.15'></a> <a name='sparseSensingDemo'></a> 

#
#   Example of recovering a sparse signal using lasso. See text for details. Adapted from Figure 1 of <a href='#Figueiredo07'>[FNW07]</a> .  
# Figure(s) generated by [sparse_sensing_demo.py](https://github.com/probml/pyprobml/blob/master/scripts/sparse_sensing_demo.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run sparse_sensing_demo.py

# ## Figure 11.16:<a name='11.16'></a> <a name='groupLassoGauss'></a> 

#
#   Illustration of group lasso where the original signal is piecewise Gaussian. (a) Original signal. (b) Vanilla lasso estimate. (c) Group lasso estimate using an $\ell _2$ norm on the blocks. (d) Group lasso estimate using an $\ell _ \infty  $ norm on the blocks. Adapted from Figures 3-4 of <a href='#Wright09'>[WNF09]</a> .  
# Figure(s) generated by [groupLassoDemo.py](https://github.com/probml/pyprobml/blob/master/scripts/groupLassoDemo.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run groupLassoDemo.py

# ## Figure 11.17:<a name='11.17'></a> <a name='groupLassoUnif'></a> 

#
#   Same as \cref  fig:groupLassoGauss , except the original signal is piecewise constant.  
# Figure(s) generated by [groupLassoDemo.py](https://github.com/probml/pyprobml/blob/master/scripts/groupLassoDemo.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run groupLassoDemo.py

# ## Figure 11.18:<a name='11.18'></a> <a name='splinesWeighted'></a> 

#
#   Illustration of B-splines of degree 0, 1 and 3. Top row: unweighted basis functions. Dots mark the locations of the 3 internal knots at $[0.25, 0.5, 0.75]$. Bottom row: weighted combination of basis functions using random weights.  
# Figure(s) generated by [splines_basis_weighted.py](https://github.com/probml/pyprobml/blob/master/scripts/splines_basis_weighted.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run splines_basis_weighted.py

# ## Figure 11.19:<a name='11.19'></a> <a name='splinesHeatmap'></a> 

#
#   Design matrix for B-splines of degree (a) 0, (b) 1 and (c) 3. We evaluate the splines on 20 inputs ranging from 0 to 1.  
# Figure(s) generated by [splines_basis_heatmap.py](https://github.com/probml/pyprobml/blob/master/scripts/splines_basis_heatmap.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run splines_basis_heatmap.py

# ## Figure 11.20:<a name='11.20'></a> <a name='splinesCherry'></a> 

#
#   Fitting a cubic spline regression model with 15 knots to a 1d dataset.  
# Figure(s) generated by [splines_cherry_blossoms.py](https://github.com/probml/pyprobml/blob/master/scripts/splines_cherry_blossoms.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run splines_cherry_blossoms.py

# ## Figure 11.21:<a name='11.21'></a> <a name='linregRobust'></a> 

#
#   (a) Illustration of robust linear regression.  
# Figure(s) generated by [linregRobustDemoCombined.py](https://github.com/probml/pyprobml/blob/master/scripts/linregRobustDemoCombined.py) [huberLossPlot.py](https://github.com/probml/pyprobml/blob/master/scripts/huberLossPlot.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linregRobustDemoCombined.py

# %run huberLossPlot.py

# ## Figure 11.22:<a name='11.22'></a> <a name='bayesLinRegPlot2d'></a> 

#
#   Sequential Bayesian inference of the parameters of a linear regression model $p(y|\mathbf  x ) = \mathcal  N (y | w_0 + w_1 x_1, \sigma ^2)$. Left column: likelihood function for current data point. Middle column: posterior given first $N$ data points, $p(w_0,w_1|\mathbf  x _ 1:N ,y_ 1:N ,\sigma ^2)$. Right column: samples from the current posterior predictive distribution. Row 1: prior distribution ($N=0$). Row 2: after 1 data point. Row 3: after 2 data points. Row 4: after 100 data points. The white cross in columns 1 and 2 represents the true parameter value; we see that the mode of the posterior rapidly converges to this point. The blue circles in column 3 are the observed data points. Adapted from Figure 3.7 of <a href='#BishopBook'>[Bis06]</a> .  
# Figure(s) generated by [linreg_2d_bayes_demo.py](https://github.com/probml/pyprobml/blob/master/scripts/linreg_2d_bayes_demo.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linreg_2d_bayes_demo.py

# ## Figure 11.23:<a name='11.23'></a> <a name='linregDemoUncertaintyBars'></a> 

#
#   (a) Plugin approximation to predictive density (we plug in the MLE of the parameters) when fitting a second degree polynomial to some 1d data. (b) Posterior predictive density, obtained by integrating out the parameters. Black curve is posterior mean, error bars are 2 standard deviations of the posterior predictive density. (c) 10 samples from the plugin approximation to posterior predictive distribution. (d) 10 samples from the true posterior predictive distribution.  
# Figure(s) generated by [linreg_post_pred_plot.py](https://github.com/probml/pyprobml/blob/master/scripts/linreg_post_pred_plot.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linreg_post_pred_plot.py

# ## Figure 11.24:<a name='11.24'></a> <a name='bayesPostCentering'></a> 

#
#   Posterior samples of $p(w_0,w_1| \mathcal  D  )$ for 1d linear regression model $p(y|x,\boldsymbol  \theta  )=\mathcal  N (y|w_0 + w_1 x, \sigma ^2)$ with a Gaussian prior. (a) Original data. (b) Centered data.  
# Figure(s) generated by [linreg_2d_bayes_centering_pymc3.py](https://github.com/probml/pyprobml/blob/master/scripts/linreg_2d_bayes_centering_pymc3.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run linreg_2d_bayes_centering_pymc3.py

# ## Figure 11.25:<a name='11.25'></a> <a name='multilegMarginals'></a> 

#
#   Posterior marginals for the parameters in the multi-leg example.  
# Figure(s) generated by [multi_collinear_legs_numpyro.py](https://github.com/probml/pyprobml/blob/master/scripts/multi_collinear_legs_numpyro.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run multi_collinear_legs_numpyro.py

# ## Figure 11.26:<a name='11.26'></a> <a name='multilegSum'></a> 

#
#   Posteriors for the multi-leg example. (a) Joint posterior $p(\beta _l,\beta _r| \mathcal  D  )$ (b) Posterior of $p(\beta _l + \beta _r | data)$.  
# Figure(s) generated by [multi_collinear_legs_numpyro.py](https://github.com/probml/pyprobml/blob/master/scripts/multi_collinear_legs_numpyro.py) 

#@title Click me to run setup { display-mode: "form" }
try:
  if PYPROBML_SETUP_ALREADY_RUN:
    print('skipping setup')
except:
  PYPROBML_SETUP_ALREADY_RUN = True
  print('running setup...')
  # !git clone https://github.com/probml/pyprobml /pyprobml &> /dev/null 
  # %cd -q /pyprobml/scripts
  import pyprobml_utils as pml
  import colab_utils
  import os
  os.environ["PYPROBML"] = ".." # one above current scripts directory
  import google.colab 
  from google.colab.patches import cv2_imshow
  # %reload_ext autoreload 
  # %autoreload 2
  def show_image(img_path,size=None,ratio=None):
      img = colab_utils.image_resize(img_path, size)
      cv2_imshow(img)
  print('finished!')

# %run multi_collinear_legs_numpyro.py

# ## References:
#  <a name='BishopBook'>[Bis06]</a> C. Bishop "Pattern recognition and machine learning". (2006). 
#
# <a name='Figueiredo07'>[FNW07]</a> M. Figueiredo, R. Nowak and S. Wright. "Gradient projection for sparse reconstruction: applicationto compressed sensing and other inverse problems". In: IEEE. J. on Selected Topics in Signal Processing (2007). 
#
# <a name='Hastie01'>[HTF01]</a> T. Hastie, R. Tibshirani and J. Friedman. "The Elements of Statistical Learning". (2001). 
#
# <a name='HastieBook'>[HTF09]</a> T. Hastie, R. Tibshirani and J. Friedman. "The Elements of Statistical Learning". (2009). 
#
# <a name='Wright09'>[WNF09]</a> S. Wright, R. Nowak and M. Figueiredo. "Sparse reconstruction by separable approximation". In: IEEE Trans. on Signal Processing (2009). 
#
#
